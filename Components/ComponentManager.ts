import Component from "./Component";
import VirtualDOM from "../VirtualDOM/VirtualDOM";
import { TreeType } from "../VirtualDOM/VirtualDOM";

/** Controls one of the {@link Component | Component's} instances. It is not intended to be used outside of element trees. */
class ComponentManager<C extends Component<any, any>> {
  /** Index in child nodes of parent DOM element. It is set automaticaly by virtual dom. */
  indexInParent!: number;
  /** The previous tree generated by {@link Component | Component's} instance. It is used by virtual dom to compare trees. */
  componentChildTree!: TreeType;
  /** Parent DOM element. It is set automaticaly by virtual dom. */
  parentNode!: HTMLElement;
  /** The {@link VirtualDOM | VirtualDOM's} instance. It is set automaticaly by virtual dom. */
  VD!: VirtualDOM;
  /** The {@link Component | Component's} instance. It is set automaticaly when the {@link ComponentManager | ComponentManager's} instance is created. */
  component: C;
  /**
   * Creates the instance of {@link ComponentManager}. Sets the component instance to {@link ComponentManager.component | component} field.
   * And also sets the created object to the {@link Component._manager | component's manager property} using the setter.
   * @param component - the instance of {@link Component}.
   */
  constructor(component: C) {
    this.component = component;
    component.manager = this;
  }
  /** Rerenders the component's UI. And after that call the {@link Component.componentDidUpdate | componentDidUpdate} method. */
  rerenderComponent() {
    const newTree = this.component.render();
    if (this.VD) {
      this.VD.changeTree(
        this.componentChildTree,
        newTree,
        this.parentNode,
        this.indexInParent
      );
    }
    this.componentChildTree = newTree;
    this.component.componentDidUpdate();
  }
}

export default ComponentManager;
