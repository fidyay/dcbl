import Component from "./Component";
import VirtualDOM from "../VirtualDOM/VirtualDOM";
import { TreeType } from "../VirtualDOM/VirtualDOM";

/**
 * Manages a single instance of a {@link Component}.
 * This class is not intended to be used outside of the element tree.
 */
class ComponentManager<C extends Component<any, any>> {
  /** Index of this component within its parent DOM element's child nodes, set automatically by the virtual DOM. */
  public indexInParent!: number;

  /** The previous render tree generated by the component. Used for tree comparison during updates. */
  public componentChildTree!: TreeType;

  /** The parent DOM element, set automatically by the virtual DOM. */
  public parentNode!: HTMLElement;

  /** Reference to the virtual DOM instance, set automatically by the virtual DOM. */
  public VD!: VirtualDOM;

  /** The component instance managed by this manager. */
  public component: C;

  /**
   * Creates a new instance of {@link ComponentManager}.
   * Assigns the component to the manager and also assigns this manager
   * to the component's manager property using the setter.
   *
   * @param component - The {@link Component} instance to manage.
   */
  constructor(component: C) {
    this.component = component;
    component.manager = this; // Sets the manager in the component
  }

  /**
   * Rerenders the component's UI by generating a new virtual DOM tree.
   * Updates the DOM tree by comparing the new and old trees, and calls
   * the {@link Component.componentDidUpdate} lifecycle method after the update.
   */
  rerenderComponent() {
    const newTree = this.component.render(); // Get new render tree

    if (this.VD) {
      // Update the virtual DOM by comparing old and new trees
      this.VD.changeTree(
        this.componentChildTree,
        newTree,
        this.parentNode,
        this.indexInParent
      );
    }

    // Store the new tree for future comparisons
    this.componentChildTree = newTree;

    // Call component lifecycle method after update
    this.component.componentDidUpdate();
  }
}

export default ComponentManager;

/*
what was refactored
Key Changes:
Comment Clarity: Improved and clarified comments for each property and method to make the purpose more explicit, especially regarding how it interacts with the virtual DOM.
Consistent Access Modifiers: Used public for all properties explicitly for clarity, though in TypeScript, this is implicit.
Simplified Method Explanation: Refactored the explanation of rerenderComponent to make its function easier to understand (i.e., rerender logic and lifecycle method).
Grouping: Logical grouping of class properties and the constructor, making it easier to follow the class structure.
This refactoring improves the overall readability and structure while maintaining the functionality of the ComponentManager.
*/
